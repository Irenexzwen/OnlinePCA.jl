using OnlinePCA
using ArgParse:
    ArgParseSettings, parse_args, @add_arg_table

# main
function main()
    pca = OnlinePCA.GD()
    parsed_args = OnlinePCA.parse_commandline(pca)
    println("Parsed args:")
    for (arg,val) in parsed_args
        println("  $arg  =>  $val")
    end

    if parsed_args["logscale"]
        logscale=true
    else
        logscale=parse(Bool, parsed_args["logscale"])
    end

    if parsed_args["pseudocount"] == 1.0f0
        pseudocount = 1.0f0
    else
        pseudocount=Float32(parsed_args["pseudocount"])
    end

    dim=parse(Int64, parsed_args["dim"])

    if parsed_args["stepsize"] == 0.1f0
        stepsize = 0.1f0
    else
        stepsize=parse(Float32, parsed_args["stepsize"])
    end

    numepoch=parse(Int64, parsed_args["numepoch"])

    if parsed_args["g"] == 0.9f0
        g = 0.9f0
    else
        g=parse(Float32, parsed_args["g"])
    end

    if parsed_args["epsilon"] == 1.0f-8
        epsilon = 1.0f-8
    else
        epsilon=parse(Float32, parsed_args["epsilon"])
    end

    if parsed_args["logdir"] == nothing
        logdir = parsed_args["logdir"]
    else
        logdir = String(parsed_args["logdir"])
    end

    out = OnlinePCA.gd(input=parsed_args["input"],
        logscale=logscale,
        pseudocount=pseudocount,
        rowmeanlist=parsed_args["rowmeanlist"],
        colsumlist=parsed_args["colsumlist"],
        masklist=parsed_args["masklist"],
        dim=dim,
        stepsize=stepsize,
        numepoch=numepoch,
        scheduling=parsed_args["scheduling"],
        g=g,
        epsilon=epsilon,
        logdir=logdir)
    OnlinePCA.output(parsed_args["outdir"], out)
end

main()