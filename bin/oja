using OnlinePCA
using ArgParse:
    ArgParseSettings, parse_args, @add_arg_table

# options
function parse_commandline()
    s = ArgParseSettings()

    @add_arg_table s begin
        "--input", "-i"
            help = "input file"
            required = true
        "--output", "-o"
            help = "output file"
            default = "."
            required = false
        "--logscale"
            help = "whether the value are converted to log-scale"
            arg_type = Bool
            default = true
        "--pseudocount", "-p"
            help = "log10(exp + pseudocount)"
            arg_type = Float64
            default = 1.0
        "--rowmeanlist", "-m"
            help = "mean vector of each row"
            default = ""
            required = false
        "--colliblist"
            help = "Sum of counts of each column"
            default = ""
            required = false
        "--masklist"
            help = "Columns to be remove"
            default = ""
            required = false
        "--dim", "-d"
            help = "dimention of PCA"
            arg_type = Int
            default = 3
        "--stepsize", "-s"
            help = "stepsize of PCA"
            arg_type = Float64
            default = 0.1
        "--numepoch", "-e"
            help = "numepoch of PCA"
            arg_type = Int
            default = 5
        "--scheduling"
            help = "Learning Rate Scheduling"
            arg_type = String
            default = "robbins-monro"
        "-g"
            help = "Ratio of non-SGD gradient"
            arg_type = Float64
            default = 0.9
        "--epsilon"
            help = "a small number for avoiding zero division"
            arg_type = Float64
            default = 0.00000001
        "--logfile", "-l"
            help = "saving log file"
            default = false
    end

    return parse_args(s)
end

# main
function main()
    parsed_args = parse_commandline()
    println("Parsed args:")
    for (arg,val) in parsed_args
        println("  $arg  =>  $val")
    end

    out = oja(input=parsed_args["input"],
        output=parsed_args["output"],
        logscale=parsed_args["logscale"],
        pseudocount=parsed_args["pseudocount"],
        rowmeanlist=parsed_args["rowmeanlist"],
        colliblist=parsed_args["colliblist"],
        masklist=parsed_args["masklist"],
        dim=parsed_args["dim"],
        stepsize=parsed_args["stepsize"],
        numepoch=parsed_args["numepoch"],
        scheduling=parsed_args["scheduling"],
        g=parsed_args["g"],
        epsilon=parsed_args["epsilon"],
        logfile=parsed_args["logfile"])

    writecsv(parsed_args["output"]*"/Eigen_vectors.csv", out[1])
    writecsv(parsed_args["output"]*"/Eigen_values.csv", out[2])
    writecsv(parsed_args["output"]*"/Loadings.csv", out[3])
    writecsv(parsed_args["output"]*"/Scores.csv", out[4])

    touch(parsed_args["output"]*"/Eigen_vectors.csv")
    touch(parsed_args["output"]*"/Eigen_values.csv")
    touch(parsed_args["output"]*"/Loadings.csv")
    touch(parsed_args["output"]*"/Scores.csv")
end

main()