"""
    sumr(;slfile::AbstractString="", outdir::AbstractString=".", pseudocount::Number=1.0)

Extract the summary information of data matrix.

`slfile` is a Julia Binary file generated by `csv2sl` function.

`outdir` is specified the directory you want to save the result.

`pseudocount` is specified to avoid NaN by log10(0) and used when `Feature_LogMeans.csv` <log10(mean+pseudocount) value of each feature> is generated.

Output Files
---------
- `Sample_NoCounts.csv` : Sum of counts in each column.
- `Feature_Means.csv` : Mean in each row.
- `Feature_LogMeans.csv` : Log10(Mean+pseudocount) in each row.
- `Feature_Vars.csv` : Sample variance in each row.
- `Feature_CV2s.csv` : Coefficient of Variation in each row.
- `Feature_NoZeros.csv` : Number of zero-elements in each row.
"""
function sumr(;slfile::AbstractString="", outdir::AbstractString=".", pseudocount::Number=1.0)
    # Initialization
    N, M = nm(slfile)

    # 1 / 2 : Column-wise statistics
    println("1 / 2 : Column-wise statistics are calculated...")
    Sample_NoCounts = nocounts(slfile, N, M)

    # 2 / 2 : Row-wise statistics
    println("2 / 2 : Row-wise statistics are calculated...")
    Feature_Means, Feature_LogMeans, Feature_Vars, Feature_CV2s, Feature_NoZeros = stats(slfile, N, M, pseudocount)

    # Save
    writecsv(outdir*"/Sample_NoCounts.csv", Sample_NoCounts)
    writecsv(outdir*"/Feature_Means.csv", Feature_Means)
    writecsv(outdir*"/Feature_LogMeans.csv", Feature_LogMeans)
    writecsv(outdir*"/Feature_Vars.csv", Feature_Vars)
    writecsv(outdir*"/Feature_CV2s.csv", Feature_CV2s)
    writecsv(outdir*"/Feature_NoZeros.csv", Feature_NoZeros)
end

# Column-wise statistics
function nocounts(slfile::AbstractString, N::Number, M::Number)
    nc = zeros(Int64, M)
    progress = Progress(N)
    open(slfile) do file
        N = read(file, Int64)
        M = read(file, Int64)
        for n = 1:N
            # Data Import
            x = deserialize(file)
            # Update
            nc = nc .+ x
            # Progress Bar
            next!(progress)
        end
    end
    return nc
end

# Row-wise statistics
function stats(slfile::AbstractString, N::Number, M::Number, pseudocount::Number)
    m = zeros(N)
    lm = zeros(N)
    v = zeros(N)
    c = zeros(N)
    nz = zeros(N)
    progress = Progress(N)
    open(slfile) do file
        N = read(file, Int64)
        M = read(file, Int64)
        for n = 1:N
            # Data Import
            x = deserialize(file)
            # Update
            m[n] = mean(x)
            lm[n] = log10(mean(x .+ pseudocount))
            v[n] = var(x)
            c[n] = v[n] / m[n]^2
            nz[n] = M - length(x.nzind)
            # Progress Bar
            next!(progress)
        end
    end
    return m, lm, v, c, nz
end